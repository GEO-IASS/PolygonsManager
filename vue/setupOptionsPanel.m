function setupOptionsPanel(obj)
%SETUPINFOPANEL  creates the fields where the polygons' informations are displayed
    
    info_box = uipanel('parent', obj.handles.options, ...
                   'background', [.99 .99 .99]);
    % fields with fixed text 
    uicontrol('parent', info_box,...
            'position', [10 97 100 20], ...
               'style', 'text',...
              'string', 'Area :');

    uicontrol('parent', info_box,...
            'position', [10 68 100 20], ...
               'style', 'text',...
              'string', 'Perimeter :');

    uicontrol('parent', info_box,...
            'position', [10 39 100 20], ...
               'style', 'text',...
              'string', 'Vertices :');

    uicontrol('parent', info_box,...
            'position', [10 10 100 20], ...
               'style', 'text',...
              'string', 'Orientation :');

    % fields with dynamic text 
    fields{1} = uicontrol('parent', info_box,...
                       'position', [86 97 100 20], ...
                          'style', 'text');

    fields{2} = uicontrol('parent', info_box,...
                       'position', [86 68 100 20], ...
                          'style', 'text');

    fields{3} = uicontrol('parent', info_box,...
                       'position', [86 39 100 20], ...
                          'style', 'text');

    fields{4} = uicontrol('parent', info_box,...
                       'position', [86 10 100 20], ...
                          'style', 'text');
                      
     obj.handles.infoFields = fields;
     
    color_box = uipanel('parent', obj.handles.options, ...
                    'background', [.99 .99 .99]);
                
    % create the inputs of the dialog box
    uicontrol('parent', color_box, ...
            'position', [10 97 90 20], ...
               'style', 'text', ...
              'string', 'Factor :');

    popup1 = uicontrol('Parent', color_box, ...
                     'Position', [100 100 90 20], ...
                        'Style', 'popup', ...
                       'string', {'none', 'factor'}, ...
                          'tag', 'factor', ...
                     'callback', @(~,~) callback);

    uicontrol('parent', color_box, ...
            'position', [10 39 90 20], ...
               'style', 'text', ...
              'string', 'Legend :');

    toggleB = uicontrol('parent', color_box, ...
                   'position', [100 41 90 20], ...
                      'style', 'toggleButton', ...
                     'string', 'Yes', ...
                   'callback', @(h,~) toggle(h));
               
        
    pca_box = uipanel('parent', obj.handles.options, ...
                    'background', [.99 .99 .99]);
                
    % create the inputs of the dialog box
    uicontrol('parent', pca_box, ...
            'position', [10 97 90 20], ...
               'style', 'text', ...
              'string', 'Group :');

    popup2 = uicontrol('Parent', pca_box, ...
                     'Position', [100 100 90 20], ...
                        'Style', 'popup', ...
                       'string', {'None', 'Convex hull', 'Ellipse', 'Inertia ellipse'}, ...
                       'enable', 'off', ...
                          'tag', 'group', ...
                     'callback', @(~,~) popupCallback);
                 
    uicontrol('parent', pca_box, ...
            'position', [10 68 90 20], ...
               'style', 'text', ...
              'string', 'Factor :');

    popup3 = uicontrol('Parent', pca_box, ...
                     'Position', [100 71 90 20], ...
                        'Style', 'popup', ...
                       'string', {'none', 'factor'}, ...
                       'enable', 'off', ...
                          'tag', 'factor', ...
                     'callback', @(~,~) callback);

    uicontrol('parent', pca_box, ...
            'position', [10 39 90 20], ...
               'style', 'text', ...
              'string', 'Marker size :');

    popup4 = uicontrol('Parent', pca_box, ...
                     'Position', [100 42 90 20], ...
                        'Style', 'popup', ...
                       'string', 5:25, ...
                        'value', 6, ...
                     'callback', @(~,~) callback);

    uicontrol('parent', pca_box, ...
            'position', [10 10 90 20], ...
               'style', 'text', ...
              'string', 'Names :');

    toggleB2 = uicontrol('parent', pca_box, ...
                       'position', [100 12 90 20], ...
                          'style', 'toggleButton', ...
                         'string', 'Yes', ...
                       'callback', @(h,~) toggle(h));
                 
    h = findobj(obj.handles.options, '-not', 'Type', 'uicontainer', '-and', '-not', 'Type', 'uipanel');
    set(h, 'fontsize', 10, ...
'horizontalalignment', 'left', ...
         'background', [.99 .99 .99]); 
     
     obj.handles.options.TabTitles = {'Infos', 'Color', 'Pca'};
     obj.handles.options.TabEnables = {'on', 'off', 'off'};
     
    function callback
        val = popup1.Value;
        maps = popup1.String;
        factor = maps{val};
        
        leg = toggleB.Value;
        
        val = popup2.Value;
        maps = popup2.String;
        group = maps{val};
        
        val = popup3.Value;
        maps = popup3.String;
        factor2 = maps{val};
        
        marker = popup4.Value + 4;
        
        names = get(toggleB2,'Value');
        
        if strcmp(factor, 'none') && strcmp(factor2, 'none')
            deleteColors(marker, names);
        else
            selectFactor(obj, factor, leg, factor2, group, marker, names);
        end
    end

    function toggle(button)
        if get(button,'Value') == 1
            set(button, 'string', 'No');
        else 
            set(button, 'string', 'Yes');
        end
        callback;
    end
    
    function popupCallback
        if popup2.Value == 1
            popup3.Value = 1;
            popup3.Enable = 'off';
        else
            popup3.Enable = 'on';
        end
        callback;
    end

    function deleteColors(marker, names)
    %DELETECOLORS  display the datas of the current polygons without coloration

        if isempty(obj.handles.Panels{1}.type)
            % display the polygons without coloration
            if iscell(obj.handles.Panels{1}.uiLegend)
                delete(obj.handles.Panels{1}.uiLegend{1});
            end
            displayPolygons(obj.handles.Panels{1}, getAllPolygons(obj.model.PolygonArray));
            if strcmp(class(obj.model.PolygonArray), 'PolarSignatureArray')
                if iscell(obj.handles.Panels{2}.uiLegend)
                    delete(obj.handles.Panels{2}.uiLegend{1});
                end
                displayPolarSignature(obj.handles.Panels{2}, obj.model.PolygonArray.signatures, obj.model.PolygonArray.angleList);
            end
        else
            lines = findobj(allchild(obj.handles.Panels{1}.uiAxis), '-not', 'marker', '.');
            points = findobj(allchild(obj.handles.Panels{1}.uiAxis), 'marker', '.');
            
            set(points, 'color', 'k', 'markersize', marker);
            delete(lines);
            if iscell(obj.handles.Panels{1}.uiLegend)
                delete(obj.handles.Panels{1}.uiLegend{1});
            end
            obj.handles.Panels{1}.uiLegend = [];
            if names == 0
                for i = 1:length(points)
                    text(points(i).XData, points(i).YData, ['  ' points(i).Tag], ...
                                     'parent', obj.handles.Panels{1}.uiAxis, ...
                                      'color', 'k');
                end
            end
        end
    end  
end